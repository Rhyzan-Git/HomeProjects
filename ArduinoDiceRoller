//https://www.circuitbasics.com/how-to-set-up-a-keypad-on-an-arduino/

//Libraries
#include <LiquidCrystal.h>
#include <Key.h>
#include <Keypad.h>

//------------------------------------------------------------------------------
// Initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = a1;    // Pin a1 on Arduino, Pin 4 (rs) on LCD
const int en = a2;    // Pin a2 on Arduino, Pin 6 (en) on LCD
const int d4 = 13;     // Pin 13 on Arduino, Pin 11 (d4) on LCD
const int d5 = 12;     // Pin 12 on Arduino, Pin 12 (d5) on LCD
const int d6 = 11;     // Pin 11 on Arduino, Pin 13 (d6) on LCD
const int d7 = 10;     // Pin 10 on Arduino, Pin 14 (d7) on LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

char buffer1[17] = "";                //Formatting buffer to display to the LCD
char buffer2[17] = "";                //Formatting buffer to display to the LCD
//------------------------------------------------------------------------------


//Setup
long randNumber;          //Random number rolled to be displayed
long diceFaces = 0;        //Number of dice faces, after being converted from the array
long diceNumber = 0;       //Number of dice, after being converted from the array  
int selectFaces = 0;      //Indicates 'd' has been pressed and the user is inputting number of faces
int facesArray[3];        //3 digit array for dice faces
int numberArray[2];       //2 digit array for dice amount
int numberIter = 1;       //Iterator for number of dice array
int facesIter = 2;        //Iterator for number of dice faces array
//Change Dice

//Generate random number
//randomSeed(seed)
//random(min, max)
//Roll random number

//Display random number

//Keypad reserved bytes
const byte ROWS = 4; 
const byte COLS = 4; 

//Keypad characters (In grid form)
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

//Physical pins to Arduino
byte rowPins[ROWS] = {9, 8, 7, 6}; 
byte colPins[COLS] = {5, 4, 3, 2}; 

//Used to read key press - char customKey = customKeypad.getKey();
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);


//Functions

//Populates the Arrays with dice amounts/faces
void callArray(int x){
  if (selectFaces == 0){
    numberArray[1] = numberArray[0];
    numberArray[0] = x;
  }
    else{
    facesArray[2] = facesArray[1];
    facesArray[1] = facesArray[0];
    facesArray[0] = x;
    }
  sprintf(buffer1, "Selected: %1d%1dd%1d%1d%1d%\n", numberArray[1],numberArray[0],facesArray[2],facesArray[1],facesArray[0]);
  lcd.setCursor(0, 0);
  lcd.print(buffer1);
  Serial.println(buffer1);  
  return;    
}

//Resets all values back to default
void callGlobalClear(){
  diceFaces = 0;
  diceNumber = 0;
  selectFaces = 0;
  numberIter = 1;
  facesIter = 2;
  facesArray[0] = 0;
  facesArray[1] = 0;
  facesArray[2] = 0;
  numberArray[0] = 0;
  numberArray[1] = 0;

  return;
}

//Converts array into long integer
void callConvertArray(){
  int numberD = 0;
  int numberF = 0;
  numberD = (numberArray[1]*10) + numberArray[0];
  diceNumber = numberD;
  numberF = (facesArray[2]*100) + (facesArray[1]*10) + facesArray[0];
  diceFaces = numberF;
  return;
}

void setup(){
  Serial.begin(9600);
  randomSeed(analogRead(0));
}
  
void loop(){
  char customKey = customKeypad.getKey();

switch(customKey) {
   
  case 'A':
    numberArray[0] = 1;
    numberArray[1] = 0;
    facesArray[0] = 0;
    facesArray[1] = 2;
    facesArray[2] = 0;
    selectFaces == 0;
    sprintf(buffer1, "Selected: %1d%1dd%1d%1d%1d%\n", numberArray[1],numberArray[0],facesArray[2],facesArray[1],facesArray[0]);
    lcd.setCursor(0, 0);
    lcd.print(buffer1);
    Serial.println(buffer1);  
    Serial.println(customKey);
    break;
    
  case 'B':
    numberArray[0] = 1;
    numberArray[1] = 0;
    facesArray[0] = 8;
    facesArray[1] = 0;
    facesArray[2] = 0;
    selectFaces == 0;
    sprintf(buffer1, "Selected: %1d%1dd%1d%1d%1d%\n", numberArray[1],numberArray[0],facesArray[2],facesArray[1],facesArray[0]);
    lcd.setCursor(0, 0);
    lcd.print(buffer1);
    Serial.println(buffer1); 
    Serial.println(customKey);
    break; 

  case 'C':
    numberArray[0] = 1;
    numberArray[1] = 0;
    facesArray[0] = 6;
    facesArray[1] = 0;
    facesArray[2] = 0;
    selectFaces == 0;
    sprintf(buffer1, "Selected: %1d%1dd%1d%1d%1d%\n", numberArray[1],numberArray[0],facesArray[2],facesArray[1],facesArray[0]);
    lcd.setCursor(0, 0);
    lcd.print(buffer1);
    Serial.println(buffer1); 
    Serial.println(customKey);
    break;

  case 'D':
    if (selectFaces == 0){
      selectFaces = 1;
    }
      else {
        selectFaces = 0;
      }
    Serial.println(customKey);
    break;

  case '*':
    callGlobalClear();
    Serial.println(customKey);
    break;

  case '#':
    callConvertArray();
    randNumber = random(1 * diceNumber, diceNumber * diceFaces + 1);
    sprintf(buffer2, "Rolled:    %5d\n",randNumber);
    lcd.setCursor(0, 1);
    lcd.print(buffer2);
    Serial.println(buffer2); 
    break;    
    
  case '0':
    callArray(0);
    Serial.println(customKey);
    break;
    
  case '1':
    callArray(1);
    Serial.println(customKey);
    break;
    
  case '2':
    callArray(2);
    Serial.println(customKey);
    break;
  
  case '3':
    callArray(3);
    Serial.println(customKey);
    break;  

  case '4':
    callArray(4);
    Serial.println(customKey);
    break;
    
  case '5':
    callArray(5);
    Serial.println(customKey);
    break;
    
  case '6':
    callArray(6);
    Serial.println(customKey);
    break;

  case '7':
    callArray(7);
    Serial.println(customKey);
    break;  

  case '8':
    callArray(8);
    Serial.println(customKey);
    break;

  case '9':
    callArray(9);
    Serial.println(customKey);
    break;
  
  default:
    // code block
    return;
}

delay(50);
}
